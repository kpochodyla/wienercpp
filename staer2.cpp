#include <NTL/ZZ.h>
#include <NTL/ZZX.h>
#include <NTL/ZZ_pEX.h>
#include <NTL/ZZ_pEXFactoring.h>
#include <NTL/ZZXFactoring.h>
#include <NTL/LLL.h>
#include <vector>
#include <bitset>
#include <math.h>
NTL_CLIENT

int main(){

    ZZ N = conv<ZZ>("84364443735725034864402554533826279174703893439763343343863260342756678609216895093779263028809246505955647572176682669445270008816481771701417554768871285020442403001649254405058303439906229201909599348669565697534331652019516409514800265887388539283381053937433496994442146419682027649079704982600857517093");
    ZZ X = conv<ZZ>("16368832941697135824663136184565760");
    int h = 3;
    int k=5; //stopien wielomianu
    ZZX x;
    x.SetLength(k);
    SetCoeff(x, 0, conv<ZZ>("8042851738623772177111498445836657034637966625856701286141808246704115678941677100424257248418507314826321100643521755728259329929920914184956497993433741835700841868340467520763944492286223309139275252686747118359632499155678657381454402547468294328749211194005771489595022962140734510823508149632952027150"));
    SetCoeff(x, 1, conv<ZZ>("2448384150978103282028232570287057231418683998899629870980352234961694158625726242709122320019728664837573933983531726889614700258659850190525293172219171722412984674738082780843306239808036912779492844967124483378144225448716790009474500056893779920247858010290334407998745543052080851031460474985614089468"));
    SetCoeff(x, 2, conv<ZZ>("46842882812462332715114979591053234345879721734346860344385306503703490181383039926768439169443911762183615227322259254937401328675920974403466442584813133048292509924631301301230814698894729772958426761766405708255164580512652369991237851467212325102719102926752266533625327737405860812726580401179947817932"));
    SetCoeff(x, 3, conv<ZZ>("64101955816967627441135132288694910667600760986840654041275086224373360059521335777974654550482252284886004500851151304365503553695094794448178200055660497059954097562786076952069718205101611414019386713087009411078554794605860108088331880402002522968971696932549125469197194219589877227467727341560220801899"));
    SetCoeff(x, 4, conv<ZZ>("26722085968120149045730915242871898475250474918406912779843472220323875519827517692409519608033008519465049472943132100057432742340047513511484572629049386896267194236944525557760"));
    SetCoeff(x, 5, conv<ZZ>("1"));

    int B_dim = k*h;
    mat_ZZ B;
    B.SetDims(B_dim, B_dim);
    for(int i = 0; i < B_dim; i++){
        for(int j = 0; j < B_dim; j++){
            int v = i/k;
            int u = i - k*v;
            ZZX f,tmp;
            f.SetLength(u);
            SetCoeff(f, u, conv<ZZ>("1"));
            tmp.SetLength(1);
            SetCoeff(tmp, 0, conv<ZZ>("1"));
            for(int jj = 0; jj< v; jj++){
                mul(tmp, tmp, x);
            }
            mul(tmp,f,tmp);
            ZZ prawaN,prawaX;
            power(prawaN, N, (h-1-v));
            power(prawaX, X, j);
            ZZ T;
            T=coeff(tmp, j)*(prawaN*prawaX);
            B[i].put(j,T);
        }
    }
    mat_ZZ U, B0, B1, B2;
    B0 = B;
    double t;
    long s;
    ZZ d;
    B = B0;
    s = LLL_XD(B, U, 0.99);

    ZZX c;
    c.SetLength(B_dim);
    ZZ tmpX;
    for(int i = 0; i < B_dim; i++){
        power(tmpX, X, i);
        SetCoeff(c, i, (B[0][i])/(tmpX));
    }
    cout<<c<<endl;
    return 0;
}
