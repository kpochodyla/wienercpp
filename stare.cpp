#include <iostream>
#include<gmp.h>
#include<gmpxx.h>
#include <list>
#include<vector>
using namespace std;


vector<mpz_class> cf_value(mpz_t e, mpz_t N){
    mpz_t A, B, q, tmp;

    mpz_init(A);
    mpz_init(B);
    mpz_init(tmp);
    mpz_init_set_str(q, "0", 10);
    mpz_class T(q);
    vector<mpz_class> a;
    mpz_set(A,e);
    mpz_set(B,N);
    while(mpz_sgn(B)!=0){
        mpz_div(q, A, B);
        T.set_str(mpz_get_str(NULL,10,q), 10);
        a.push_back(T);
        //printf("%s, ",mpz_get_str(NULL, 10, q));
        //printf("%s, ", T.get_str());
        mpz_set(tmp,A);
        mpz_set(A,B);
        mpz_mul(B, q, B);
        mpz_sub(B, tmp, B);
    }

    return a;
}

int attack(mpz_t e, mpz_t N){
    vector<mpz_class> a;
    vector<mpz_class> P;
    vector<mpz_class> Q;
    mpz_class jedenc;
    mpz_t zero,jeden,cztery;
    mpz_t phiN;
    mpz_t b,c,delta,p1,p2,q;
    mpz_class tmpc;
    mpz_t k;
    mpz_t d;
    mpz_t tmpt;
    mpz_init(tmpt);
    mpz_init(k);
    mpz_init(d);
    mpz_init(phiN);
    mpz_init(b);
    mpz_init(c);
    mpz_init(delta);
    mpz_init(p1);
    mpz_init(p2);
    mpz_init(q);
    mpz_init_set_str(cztery, "4", 10);
    mpz_init_set_str(zero, "0", 10);
    mpz_init_set_str(jeden, "1", 10);
    jedenc.set_str("1",10);
    a=cf_value(e,N);
    for(int i=0; i<a.size(); i++){
        if(i==0){
            P.push_back(a[i]);
            Q.push_back(jedenc);
        }else if(i==1){
            mpz_mul(tmpt, a[i].get_mpz_t(), a[i-1].get_mpz_t());
            mpz_add(tmpt, tmpt, jedenc.get_mpz_t());
            tmpc.set_str(mpz_get_str(NULL, 10, tmpt),10);
            P.push_back(tmpc);
            Q.push_back(a[i]);
        }
        else{
            mpz_mul(tmpt, a[i].get_mpz_t(), P[i-1].get_mpz_t());
            mpz_add(tmpt, tmpt, P[i-2].get_mpz_t());
            tmpc.set_str(mpz_get_str(NULL, 10, tmpt),10);
            P.push_back(tmpc);
            mpz_mul(tmpt, a[i].get_mpz_t(), Q[i-1].get_mpz_t());
            mpz_add(tmpt, tmpt, Q[i-2].get_mpz_t());
            tmpc.set_str(mpz_get_str(NULL, 10, tmpt),10);
            Q.push_back(tmpc);
        }
        mpz_set_str(k, mpz_get_str(NULL, 10, P[i].get_mpz_t()), 10);
        mpz_set_str(d, mpz_get_str(NULL, 10, Q[i].get_mpz_t()), 10);
        if(mpz_sgn(k)!=0){
            mpz_mul(phiN, e, d);
            mpz_sub(phiN, phiN, jeden);
            if(mpz_divisible_p(phiN, k)){
                mpz_div(phiN, phiN, k);
                //liczenie delty
                mpz_sub(b, N, phiN);
                mpz_add(b, b, jeden);
                mpz_neg(b, b);
                mpz_set(c, N);
                mpz_mul(tmpt, b, b); //b**2
                mpz_mul(c, cztery, c); //4ac
                mpz_sub(delta, tmpt, c); //b**2 - 4ac
                if(mpz_sgn(delta)>0){ //delta > 0
                    mpz_sqrt(delta, delta); //sqrt(delta)
                    mpz_neg(b, b); //-b
                    mpz_set_str(tmpt, "2", 10); //2a

                    mpz_sub(p1, b, delta);
                    mpz_add(p2, b, delta);

                    if(mpz_divisible_p(p1, tmpt)){ //czy p1 bedzie calkowite
                        mpz_div(p1, p1, tmpt);
                        if((mpz_sgn(p1)>0) && (mpz_divisible_p(N, p1))){ //czy p1 jest dodatnie i czy dzieli N
                            mpz_div(q, N, p1);
                            if(mpz_sgn(q)>0){
                                printf("q=%s\n", mpz_get_str(NULL, 10, q));
                                printf("d=%s\n", mpz_get_str(NULL, 10, d));
                                return 0;
                            }
                        }
                    }
                    else if(mpz_divisible_p(p2, tmpt)){
                       mpz_div(p2, p2, tmpt);
                        if((mpz_sgn(p2)>0) && (mpz_divisible_p(N, p2))){ //czy p1 jest dodatnie i czy dzieli N
                            mpz_div(q, N, p2);
                            if(mpz_sgn(q)>0){
                                printf("q=%s\n", mpz_get_str(NULL, 10, q));
                                printf("d=%s\n", mpz_get_str(NULL, 10, d));
                                return 0;
                            }
                        }

                    }
                }
                else if(mpz_sgn(delta)==0){
                    mpz_neg(b, b); //-b
                    mpz_set_str(tmpt, "2", 10); //2a
                    if(mpz_divisible_p(b, tmpt)){ //czy p1 bedzie calkowite
                        mpz_div(p1, b, tmpt);
                        if((mpz_sgn(p1)>0) && (mpz_divisible_p(N, p1))){ //czy p1 jest dodatnie i czy dzieli N
                            mpz_div(q, N, p1);
                            if(mpz_sgn(q)>0){
                                printf("q=%s\n", mpz_get_str(NULL, 10, q));
                                printf("d=%s\n", mpz_get_str(NULL, 10, d));
                                return 0;
                            }
                        }
                    }
                }
            }

        }
        //printf("%s, ", mpz_get_str(NULL, 10, d));
    }
    return 0;

}


int main(){
    mpz_t e,N;
    mpz_init_set_str(N, "648795081137889293593073769711185324732429122453896436501829099068703602543451475562094331615894751546316158083117957897675909904487731017163439403532464124689080226033493201765992136006471106981496241654913244206975635158833275027604042313872677453090359777595742139319513355957574229488863839412596123260416909264319741390671972178727744799985099456205806632568530454289162735349456694035808921107286056898184701293131314942343085677336929919663246834875238544868788758647318355387492051214789165940657633079254630614567612771836666088064018475259090886931406653385926531752683122227637208373220886405829340083671108503985648052305043172514223060283008979772642025183471579531845966682723171879553468781687639864986897949413096893432851960590867418715257715703913795708599470249274178173408888903737650353348866395588135115821423992602048747878496129517555285912285272421858577596147924553400470171075513816790554768908960094046891179798573655630634931135076806685375748983687137744860657244536581045840190749586020851407335706021116495227132051321795101143360849654679276914510510175844325646590920724154119840644203568054261797701068469599284107165563865206445606748490473287898313631069421329772104416930718108805268544388587005823893301242642609991910816658850910317705883311709486269774309386039971124438732461658602987378495355333890490665832726820088535385511232045821454851308491418523668708390802466512590903087753527135813931195363402603815013896877018442542128613955865946271435455002153144431098006805109307589545769467971769335603698067546933384078963144184912121124877546106767511995430442296988755857020050700854515102387269810770573924850479497012924499897914706598024521131147357408526985921721812027189976304621104758050023183018926083387165206580379413540815308112166585623750468276258335287472400042302986578993766448941619726050118674794850049638901690139328732391219865466851753516393419231634230808503907524271755112582659447766784731756972762287811437442884241420880640928277228486693565082803389159173862088599347793391065604088074440148643700440460735065815097118965576032481310487308336594521675053269231492104893719660291752171465005977226293597566593342894877020313181440089397233759599034317927762301269646414574967169188082654139974524467375273974615238698928696350691902552376241351616432910351064912130280627855800377394766192390410643573777275500335612333703988539605463884605536088515828893623820371986124215319069006662004607997", 10);
    mpz_init_set_str(e, "254629042267262043018112142906962592166658553560316283452038256158886201789509947502648159948464559692154016171017576978828633401773971978643484012614802879502411448230360480606846705453801938542584580173863567686629980395428170115542859380262050050356831850997277124943288663820285088361593379121356537321090746458862880584042483389770340102583392708416869504343505003432779623658135327023555806871095565814504176730189182331600249716926301542449275731339067068831905927229855220291408993701754084614464745894386437105394141388470575629482876903222897863543529575139809854593485478421234312152332013632045152727701430736295867526309458169476814130282910899752218345980090110725437223631758744239405504137225913963125861574449602058000186456918100382025255842934837229319248920011549082744681011566100898740981259129732022624386688034744183728252803003218077679554868352075297012124139013652763495612963164453639889462527152751518865247467460537850699332108323187059526070229464893180418452237699384740215791390877666001799926155433172426122362449388206469938680434857699324413472683892830334320271045241294348633296232721887154507587910107798452786243628433174242928356324111653180655068553250233286296215315006471229919426161672152281200765856338696418340962700561302933790756097634263053410629801528486034212228522239108907570411716428329902205699323848317591510922579416818744886373656989914377384572596627963101632189679438355806460974006153393015074100123958906625645857567445615910917474336643197681945142534331440645721557764103498513093738790922326488883890537014129202613905111376865151841393100101897674638371379134734443190375144072773941264154525212244555702353948976326572745266990541841289621767176924746138513218470577700450043626888861210313397643525691449769167549240548631860332644449201134887055657998235305156858421745400754399235621113363118522102764248179286173892719897690736218205749916838001921587588022377298906911200156690129424112905273387601464524920444642156541551080608794330834934441762947181050095316194878540398082233239522619158516583928312636260917488381329872272151448324161321570410491567667000113242521391030927186087269347128649807749864501827916195231441130391321188513665001199676540298421306512094250029003504454085242485200672746797179050147745949337937915409608309314743289346752646417627757765574464116841950892464679600189929538126057358505468964104561656663720244508731785144868181974435576357228782195603935639879803", 10);
    attack(e,N);
    return 0;
}
